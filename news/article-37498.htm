<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vmess-node.github.io/news/article-37498.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>探索 SocketChannel 的核心原理</title>
        <meta name="description" content="聊聊Socket  要想掌握 SocketChannel，我们就必须先了解什么是 Socket。要想解释清楚 Socket，就需要了解下 TCP/IP。 注：本文重点在 SocketChannel，所" />
        <link rel="icon" href="/assets/website/img/vmess_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Vmess Node免费节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vmess-node.github.io/news/article-37498.htm" />
    <meta property="og:site_name" content="Vmess Node免费节点订阅官网" />
    <meta property="og:title" content="探索 SocketChannel 的核心原理" />
    <meta property="og:image" content="https://vmess-node.github.io/uploads/20240804-1/11bd935741dfefbeb4b96ba178d6af10.webp" />
        <meta property="og:release_date" content="2025-01-08T10:01:15" />
    <meta property="og:updated_time" content="2025-01-08T10:01:15" />
        <meta property="og:description" content="聊聊Socket  要想掌握 SocketChannel，我们就必须先了解什么是 Socket。要想解释清楚 Socket，就需要了解下 TCP/IP。 注：本文重点在 SocketChannel，所" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="探索 SocketChannel 的核心原理">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google fonts -->
    <link href="//fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/vmess_node/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-M9G1YCGHCT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-M9G1YCGHCT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <div class="w3l-top-header">
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-dark stroke">
                    <a class="navbar-brand" href="/">
                                        <span>Vmess Node</span>
                                        </a>
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav mx-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                    </ul>
                    </div>
                </nav>
            </div>
        </header>
    </div>
    <!--/header-->
    <!-- breadcrum -->
    <section class="w3l-deal-breadcrum">
        <div class="breadcrum py-5">
            <div class="container">
                <h1>探索 SocketChannel 的核心原理</h1>
                <p><a href="/">首页</a> &nbsp; / &nbsp; <a href="/news/">新闻资讯</a>  &nbsp; / &nbsp; 正文</p>
            </div>
        </div>
    </section>
    <!-- //breadcrum -->
        <!-- //stats -->
    <section class="w3l-index2 py-5" id="about">
        <div class="container py-lg-3">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<blockquote> <h4 id="fvfrf">聊聊Socket</h4> </blockquote> <p>要想掌握 SocketChannel，我们就必须先了解什么是 Socket。要想解释清楚 Socket，就需要了解下 TCP/IP。</p> <p><strong>注：本文重点在 SocketChannel，所以对 TCP和 Socket仅仅只做相关介绍，有兴趣的同学，麻烦自查专业资料</strong>。</p> <h3 id="tcpip-体系结构">TCP/IP 体系结构</h3> <p>学过计算机网络的小伙伴知道，计算机网络是分层的，每层专注于一类事情。OSI 网路模型分为七层，如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8adf3ec36afaa8464ccf430af450b62c.jpg" alt="探索 SocketChannel 的核心原理"></p> <p>OSI 模型是理论中的模型，在实际应用中我们使用的是 TCP/IP 四层模型，它对OSI模型重新进行了划分和规整，如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/602f3ed2cb0a17dc112b85b8f36c9e9a.jpg" alt="探索 SocketChannel 的核心原理"></p> <p>网络层次划分清楚了，那怎么传输数据呢？如下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/fbefbbb1b832988f531374b62fd94890.jpg" alt="探索 SocketChannel 的核心原理"></p> <p>计算机A首先在应用层将要发送的数据准备好，然后给传输层，<strong>传输层的主要作用就是为发送端和接收端提供可靠的连接服务</strong>，传输层将数据处理完成后给网络层，<strong>网络层的一个核心功能就是数据传输路径的选择</strong>。计算机A到计算机B有很多条路，网络层的作用就是负责管理下一步数据应该到那个路由器，选择好路径后，数据就到了网络接入层，该层主要负责将数据从一个路由器发送到另一个路由器。</p> <p>上图是一个非常清晰的传输过程。但是我们思考两个个问题：</p> <ol> <li>计算机A是怎么知道计算机B的具体位置的呢？</li> <li>它又怎么知道将该数据包发送给哪个应用程序呢？</li> </ol> <p>TCP/IP协议族已经帮我们解决了这个问题：<strong>IP地址+协议+端口</strong>。</p> <ul> <li><strong>网络层的“IP地址”唯一标识了网络中的主机</strong>：这样就可以找到要将数据发送给哪台主机了。</li> <li><strong>传输层的“协议 + 端口”唯一标识主机中的应用程序</strong>：这样就可以找到要将数据发给那个应该程序了。</li> </ul> <p>利用三元组（IP地址、协议、端口）就可以让计算机A确定将数据包发送给计算机B的应用程序了。</p> <p>使用TCP/IP 协议的应用程序通常采用编程接口：UNIX BSD的套接字(socket)和UNIX System V的TLI(已经被淘汰)，来实现网络进程之间的通信。就目前而言，<strong>几乎所有的应用程序都是采用的 Socket</strong>。</p> <h3 id="socket">Socket</h3> <p>上面提到就目前而言，几乎所有的应用程序都是采用 Socket 来完成网络通信的。那什么是Socket呢？百度百科是这样定义的：</p> <blockquote> <p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。</p> </blockquote> <p>在TCP/IP四层模型中，我们并没有看到 Socket 影子，那它到底在哪里呢？ 又扮演什么角色呢？</p> <p>Socket 并不是属于 TCP/IP 模型中的任何一层，它的存在只是为了让应用层能够更加简便地将数据传输给传输层，应用层不需要关注TCP/IP 协议的复杂内容。我们可以将其理解成一个接口，一个把复杂的TCP/IP协议族隐藏起来的接口，对于应用层而言，他们只需要简单地调用 Socket 接口就可以实现复杂的TCP/IP 协议，就像设计模式中的门面模式（<strong>将复杂的TCP\IP 协议族隐藏起来，对外提供统一的接口，是应用层能够更加容易地使用</strong>）。简单地说就是简单来说可以把<strong>Socket理解成是应用层与TCP/IP协议族通信的抽象层、函数库</strong>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/25cfe7426cdc8973675f24bdb1bc160e.jpg" alt="探索 SocketChannel 的核心原理"></p> <p>下图是 Socket一次完整的通信流程图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f0f9fe808054fb572b259b2f575fd4e7.jpg" alt="探索 SocketChannel 的核心原理"></p> <p>上图设计到的Socket 相关函数：</p> <ul> <li><code>socket()</code>：返回套接字描述符</li> <li><code>connect()</code>：建立连接</li> <li><code>bind()</code>：一个本地协议地址赋予一个套接字</li> <li><code>linsten()</code>：服务器监听端口连接</li> <li><code>accept()</code>：应用程序接受完成3次握手的客户端连接</li> <li><code>send()</code>、<code>recv()</code>、<code>write()</code>、<code>read()</code>：服务端与客户端互相发送数据</li> <li><code>colse()</code>：关闭连接</li> </ul> <h2 id="探究socketchannel">探究SocketChannel</h2> <p>SocketChannel 是一个连接 TCP 网络Socket 的 Channel，我们可以认为它是对传统 Java Socket API的改进。它支持了非阻塞的读写。</p> <p>SocketChannel具有如下特点</p> <ol> <li>对于已经存在的socket不能创建SocketChannel。</li> <li>SocketChannel中提供的open接口创建的Channel并没有进行网络级联，需要使用connect接口连接到指定地址。</li> <li>未进行连接的SocketChannle执行I/O操作时，会抛出<code>NotYetConnectedException</code>。</li> <li>SocketChannel支持两种I/O模式：阻塞式和非阻塞式。</li> <li>SocketChannel支持异步关闭。如果SocketChannel在一个线程上read阻塞，另一个线程对该SocketChannel调用shutdownInput，则读阻塞的线程将返回-1表示没有读取任何数据；如果SocketChannel在一个线程上write阻塞，另一个线程对该SocketChannel调用shutdownWrite，则写阻塞的线程将抛出<code>AsynchronousCloseException</code>。</li> </ol> <h3 id="socketchannel-的使用">SocketChannel 的使用</h3> <p><strong>1. 创建SocketChannel</strong></p> <p>要想使用 SocketChannel我们首先得创建它。创建SocketChannel的方式有两种：</p> <pre><code class="language-Java">// 方式 1 SocketChannel socketChannel = SocketChannel.open(new InetSocketAddress("www.baidu.com", 80));  // 方式 2 SocketChannel socketChannel = SocketChannel.open(); socketChannel.connect(new InetSocketAddress("www.baidu.com", 80));</code></pre> <p><strong>2、连接校验</strong></p> <p>使用的SocketChannel必须是已连接的，如果使用一个未连接的SocketChannel，则会抛出<code>NotYetConnectedException</code>。SocketChannel提供了四个方法来校验连接。</p> <pre><code class="language-Java">// 测试SocketChannel是否为open状态 socketChannel.isOpen(); // 测试SocketChannel是否已经被连接    socketChannel.isConnected(); // 测试SocketChannel是否正在进行连接 socketChannel.isConnectionPending(); // 校验正在进行套接字连接的SocketChannel是否已经完成连接 socketChannel.finishConnect();</code></pre> <p><strong>3、读操作</strong></p> <p>SocketChannel 提供了<code>read()</code>方法用于读取数据：</p> <pre><code class="language-Java">public abstract int read(ByteBuffer dst) throws IOException;  public abstract long read(ByteBuffer[] dsts, int offset, int length) throws IOException;  public final long read(ByteBuffer[] dsts) throws IOException {   return read(dsts, 0, dsts.length); }</code></pre> <p>首先我们需要先分配一个 ByteBuffer，然后调用<code>read()</code>方法，该方法会将数据从SocketChannel读入到 ByteBuffer中。</p> <pre><code class="language-Java">ByteBuffer buf = ByteBuffer.allocate(48); int bytesRead = socketChannel.read(buf);</code></pre> <p><code>read()</code>方法会返回一个 int 值，该值表示读取了多少数据到 Buffer 中，如果返回 -1，则表示已经读到了流的末尾。</p> <p>4、<strong>写操作</strong></p> <p>调用 SocketChannel的<code>write()</code>方法，可以向  SocketChannel 中写数据。</p> <pre><code class="language-Java">public abstract int write(ByteBuffer src) throws IOException;  public abstract long write(ByteBuffer[] srcs, int offset, int length) throws IOException;  public final long write(ByteBuffer[] srcs) throws IOException {     return write(srcs, 0, srcs.length); }</code></pre> <p><strong>5、设置 I/O 模式</strong></p> <p>SocketChannel 支持阻塞和非阻塞两种 I/O 模式，调用<code>configureBlocking()</code>方法即可：</p> <pre><code class="language-Java">socketChannel.configureBlocking(false);</code></pre> <p>false 表示非阻塞，true 表示阻塞。</p> <p><strong>6、关闭</strong></p> <p>当使用完 SocketChannel 后需要将其关闭，SocketChannel 提供了<code>close()</code>来关闭 SocketChannel 。</p> <pre><code class="language-Java">socketChannel.close();</code></pre> <h3 id="socketchannel-源码分析">SocketChannel 源码分析</h3> <p>上面简单介绍了 SocketChannel 的使用，下面我们再来详细分析 SocketChannel 的源码。SocketChannel 实现 Channel 接口，它有一个核心子类 SocketChannel，该类实现了 SocketChannel 的大部分功能。如下（图有删减）</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5768aa5d2159e71595b6cc0af6b51dd5.jpg" alt="探索 SocketChannel 的核心原理"></p> <h4 id="创建-socketchannel"><strong>创建</strong><strong>SocketChannel</strong></h4> <p>上面提到通过调用<code>open()</code>方法就可以一个 SocketChannel 实例。</p> <pre><code class="language-Java">    public static SocketChannel open() throws IOException {         return SelectorProvider.provider().openSocketChannel();     }</code></pre> <p>我们看到它是通过 SelectorProvider 来创建 SocketChannel 的，<code>provider()</code> 方法会创建一个 SelectorProvider 实例，SelectorProvider 是 Selector 和 Channel 实例的提供者，它提供了创建 Selector、SocketChannel、ServerSocketChannel 实例的方法，采用  SPI 的方式实现。<strong>SelectorProvider</strong> 我们在讲解 Selector 的时候在阐述。</p> <p>provider 创建完成后调用<code>openSocketChannel()</code> 来创建 SocketChannel。</p> <pre><code class="language-Java">    public SocketChannel openSocketChannel() throws IOException {         return new SocketChannelImpl(this);     }</code></pre> <p>从这了就可以看出 SocketChannelImpl 为 SocketChannel 的实现者。调用 SocketChannelImpl 的构造函数实例化一个 SocketChannel 对象。</p> <pre><code class="language-Java">    SocketChannelImpl(SelectorProvider sp) throws IOException {         super(sp);         // 创建 Socket 并创建一个文件描述符与其关联         this.fd = Net.socket(true);         // 在注册 selector 的时候需要获取到文件描述符的值         this.fdVal = IOUtil.fdVal(fd);         // 设置状态为未连接         this.state = ST_UNCONNECTED;     }</code></pre> <p><strong>fd</strong>：文件夹描述符对象。</p> <p><strong>fdVal</strong>：fd 的 value。</p> <blockquote> <p>文件描述符简称 fd，它是一个抽象概念，在 C 库编程中可以叫做文件流或文件流指针，在其它语言中也可以叫做文件句柄（handler），而且这些不同名词的隐含意义可能是不完全相同的。不过在系统层，我们统一把它叫做文件描述符。</p> </blockquote> <p><strong>state</strong>：状态，设置为未连接。它有如下 6 个值</p> <pre><code class="language-Java">private static final int ST_UNINITIALIZED = -1; private static final int ST_UNCONNECTED = 0; private static final int ST_PENDING = 1; private static final int ST_CONNECTED = 2; private static final int ST_KILLPENDING = 3; private static final int ST_KILLED = 4;</code></pre> <h4 id="连接服务器connect">连接服务器：connect()</h4> <p>调用<code>Connect()</code> 方法可以链接远程服务器。</p> <pre><code class="language-Java">    public boolean connect(SocketAddress sa) throws IOException {         int localPort = 0;                  // 注意这里的加锁         synchronized (readLock) {             synchronized (writeLock) {                // 确保当前 SocketChannel 是打开且未连接的                 ensureOpenAndUnconnected();                 InetSocketAddress isa = Net.checkAddress(sa);                 SecurityManager sm = System.getSecurityManager();                 if (sm != null)                     sm.checkConnect(isa.getAddress().getHostAddress(),                                     isa.getPort());                 // 这里的锁是注册和阻塞配置的锁                 synchronized (blockingLock()) {                     int n = 0;                     try {                         try {                             // 支持线程中断，通过设置当前线程的Interruptible blocker属性实现                             begin();                             //                              synchronized (stateLock) {                                // 默认为 open, 除非调用了 close()                                 if (!isOpen()) {                                     return false;                                 }                                 // 只有未绑定本地地址也就是说未调用bind方法才执行                                 if (localAddress == null) {                                     NetHooks.beforeTcpConnect(fd,                                                            isa.getAddress(),                                                            isa.getPort());                                 }                                 // 记录当前线程                                 readerThread = NativeThread.current();                             }                             for (;;) {                                 InetAddress ia = isa.getAddress();                                 if (ia.isAnyLocalAddress())                                     ia = InetAddress.getLocalHost();                                 // 调用 Linux 的 connect 函数实现                                 // 如果采用堵塞模式，会一直等待，直到成功或出现异常                                 n = Net.connect(fd,                                                 ia,                                                 isa.getPort());                                 if (  (n == IOStatus.INTERRUPTED)                                       &amp;&amp; isOpen())                                     continue;                                 break;                             }                          } finally {                             readerCleanup();                             end((n &gt; 0) || (n == IOStatus.UNAVAILABLE));                             assert IOStatus.check(n);                         }                     } catch (IOException x) {                         // 出现异常，关闭 Channel                         close();                         throw x;                     }                     synchronized (stateLock) {                         remoteAddress = isa;                         if (n &gt; 0) {                             // n &gt; 0,表示连接成功                             // 连接成功，更新状态为ST_CONNECTED                             state = ST_CONNECTED;                             if (isOpen())                                                                  localAddress = Net.localAddress(fd);                             return true;                         }                         // 如果是非堵塞模式，而且未立即返回成功，更新状态为ST_PENDING                         // 由此可见，该状态只有非堵塞时才会存在                         if (!isBlocking())                             state = ST_PENDING;                         else                             assert false;                     }                 }                 return false;             }         }     }</code></pre> <p>该方法的核心方法就在于<code>n = Net.connect(fd,ia,isa.getPort());</code> 该方法会一直调用到 native 方法去：</p> <pre><code class="language-Java">JNIEXPORT jint JNICALL Java_sun_nio_ch_Net_connect0(JNIEnv *env, jclass clazz, jboolean preferIPv6,                              jobject fdo, jobject iao, jint port) {     SOCKADDR sa;     int sa_len = SOCKADDR_LEN;     int rv;     //地址转换为struct sockaddr格式     if (NET_InetAddressToSockaddr(env, iao, port, (struct sockaddr *) &amp;sa,                                   &amp;sa_len, preferIPv6) != 0)     {       return IOS_THROWN;     }    //传入 fd 和 sockaddr,与远程服务器建立连接，一般就是 TCP 三次握手    //如果设置了 configureBlocking(false), 不会堵塞，否则会堵塞一直到超时或出现异常     rv = connect(fdval(env, fdo), (struct sockaddr *)&amp;sa, sa_len);     if (rv != 0) {          // 0 表示连接成功，失败时通过 errno 获取具体原因         if (errno == EINPROGRESS) {  //非堵塞，连接还未建立(-2)             return IOS_UNAVAILABLE;         } else if (errno == EINTR) {  //中断(-3)             return IOS_INTERRUPTED;         }         return handleSocketError(env, errno); //出错     }     return 1; //连接建立,一般TCP连接连接都需要时间，因此除非是本地网络，一般情况下非堵塞模式返回IOS_UNAVAILABLE比较多； }</code></pre> <h4 id="读数据read">读数据：read()</h4> <p>SocketChannel 提供<code>read()</code> 方法读取数据。</p> <pre><code class="language-Java">   public int read(ByteBuffer buf) throws IOException {         synchronized (readLock) {             // ...             try {                 // ...                 for (;;) {                     n = IOUtil.read(fd, buf, -1, nd);                     if ((n == IOStatus.INTERRUPTED) &amp;&amp; isOpen()) {                         continue;                     }                     return IOStatus.normalize(n);                 }              } finally {                 // ...             }         }     }</code></pre> <p>核心方法就在于<code>IOUtil.read(fd, buf, -1, nd)</code>。</p> <pre><code class="language-Java">    static int read(FileDescriptor fd, ByteBuffer dst, long position,NativeDispatcher nd)         throws IOException     {         if (dst.isReadOnly())             throw new IllegalArgumentException("Read-only buffer");         if (dst instanceof DirectBuffer)             // 使用直接缓冲区读取数据             return readIntoNativeBuffer(fd, dst, position, nd);          // 当不是使用直接内存时，则从线程本地缓冲获取一块临时的直接缓冲区存放待读取的数据         ByteBuffer bb = Util.getTemporaryDirectBuffer(dst.remaining());         try {             int n = readIntoNativeBuffer(fd, bb, position, nd);             bb.flip();             if (n &gt; 0)                 // 将直接缓冲区的数据写入到堆缓冲区中                 dst.put(bb);             return n;         } finally {             // 使用完成后释放缓冲             Util.offerFirstTemporaryDirectBuffer(bb);         }     }</code></pre> <p>这里我们看到如果 ByteBuffer 是 DirectBuffer，则调用<code>readIntoNativeBuffer()</code> 读取数据，如果不是则通过<code>getTemporaryDirectBuffer()</code> 获取一个临时的直接缓冲区，然后调用<code>readIntoNativeBuffer()</code>获取数据，然后将获取的数据写入 ByteBuffer 中。</p> <pre><code class="language-Java">    private static int readIntoNativeBuffer(FileDescriptor fd, ByteBuffer bb,long position, NativeDispatcher nd)         throws IOException     {         int pos = bb.position();         int lim = bb.limit();         assert (pos &lt;= lim);         int rem = (pos &lt;= lim ? lim - pos : 0);          if (rem == 0)             return 0;         int n = 0;         if (position != -1) {             n = nd.pread(fd, ((DirectBuffer)bb).address() + pos,rem, position);         } else {             n = nd.read(fd, ((DirectBuffer)bb).address() + pos, rem);         }         if (n &gt; 0)             bb.position(pos + n);         return n;     }</code></pre> <p>写数据<code>write()</code>方法和<code>read()</code>方法大致一样，大明哥这里就不在阐述了，有兴趣的小伙伴自己去研究下。</p> <p>ServerSocketChannel 与 SocketChannel 原理大同小异，这里就不展开讲述了，下篇文章我们开始研究第三个组件：<strong>Selector</strong></p> <h2 id="参考资料">参考资料</h2> <ul> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://zhuanlan.zhihu.com/p/180556309"  target="_blank" rel="nofollow">https://zhuanlan.zhihu.com/p/180556309</a></li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-37022.htm">动物注射疫苗前后注意事项及禁忌有哪些呢（给动物注射疫苗）</a></p>
                                        <p>下一个：<a href="/news/article-37499.htm">被猫抓伤怎样判断用不用打狂犬疫苗（被猫抓伤怎么确定有没有狂犬病）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-48905.htm" title="高端猫粮品牌排行榜前十（中高端猫粮品牌）">高端猫粮品牌排行榜前十（中高端猫粮品牌）</a></li>
                        <li class="py-2"><a href="/news/article-57478.htm" title="动物疫苗的种类有哪些,各有什么特点呢（动物疫苗种类及类型）">动物疫苗的种类有哪些,各有什么特点呢（动物疫苗种类及类型）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-subscribe-node.htm" title="1月25日 | Vmess节点订阅每天更新18.4M/S免费订阅链接地址分享">1月25日 | Vmess节点订阅每天更新18.4M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-11-free-high-speed-nodes.htm" title="2月11日 | Vmess节点订阅每天更新22.4M/S免费订阅链接地址分享">2月11日 | Vmess节点订阅每天更新22.4M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-64527.htm" title="动物防疫站干嘛的 动物防疫站干嘛的啊">动物防疫站干嘛的 动物防疫站干嘛的啊</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-free-vmess-node.htm" title="1月6日 | Vmess节点订阅每天更新22.1M/S免费订阅链接地址分享">1月6日 | Vmess节点订阅每天更新22.1M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-56342.htm" title="领养宠物狗狗多少钱一个（领养一只宠物狗多少钱啊）">领养宠物狗狗多少钱一个（领养一只宠物狗多少钱啊）</a></li>
                        <li class="py-2"><a href="/news/article-45432.htm" title="ReLabel：自动将ImageNet转化成多标签数据集，更准确地有监督训练 | 2021新文">ReLabel：自动将ImageNet转化成多标签数据集，更准确地有监督训练 | 2021新文</a></li>
                        <li class="py-2"><a href="/news/article-43454.htm" title="兽用疫苗可以网上销售吗（兽用疫苗批发）">兽用疫苗可以网上销售吗（兽用疫苗批发）</a></li>
                        <li class="py-2"><a href="/news/article-47897.htm" title="吉林领养猫咪 吉林领养猫咪的地方">吉林领养猫咪 吉林领养猫咪的地方</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">12</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <style>
    .video-heading {
        max-width: 750px;
        margin: 0 auto;
    }

    .video-heading h3 {
        font-size: 60px;
        opacity: 0.8;
        line-height: 58px;
        font-weight: 300;
        text-transform: capitalize;
        color: #fff;
    }

    .video-responsive {
        padding-bottom: 600px;
        position: relative;
        width: 100%;
    }

    .canvas,
    .video {
        left: 0;
        position: absolute;
        top: 0;
        background: #000;
        z-index: 5;
        overflow: hidden;
        width: 100%;
        height: 600px;
        object-fit: cover;
    }

    #over_video {
        position: absolute;
        width: 100%;
        height: 100%;
        text-align: center;
        top: 0;
        z-index: 10;
        color: #FFF;
    }

    .bg-mask {
        background: rgba(0, 0, 0, 0.3);
        height: inherit;
        display: grid;
        align-items: center;
        padding: 0 15px;
    }

    @media screen and (max-width: 568px) {

        .canvas,
        .video {
            height: 400px;
        }

        .video-responsive {
            padding-bottom: 400px;
        }


        .video-heading h3 {
            font-size: 35px;
            line-height: 48px;
            margin-bottom: 20px;
        }
    }
    </style>
    <script src="/assets/website/js/frontend/vmess_node/canvas-video-player.js"></script>
    <script>
    var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);

    if (isIOS) {

        var canvasVideo = new CanvasVideoPlayer({
            videoSelector: '.video',
            canvasSelector: '.canvas',
            timelineSelector: false,
            autoplay: true,
            makeLoop: true,
            pauseOnClick: false,
            audio: false
        });

    } else {

        // Use HTML5 video
        document.querySelectorAll('.canvas')[0].style.display = 'none';

    }
    </script>
    <!-- scripts -->
    <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <p>Vmess Node免费节点订阅官网 版权所有 Powered by WordPress
                            </p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/vmess_node/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/vmess_node/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/vmess_node/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <script src="/assets/website/js/frontend/vmess_node/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="/assets/website/js/frontend/vmess_node/owl.carousel.js"></script>
    <!-- testimonials for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials script for owlcarousel -->
    <!-- for blog carousel slider -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            stagePadding: 20,
            margin: 15,
            nav: false,
            loop: false,
            responsive: {
                0: {
                    items: 1
                },
                600: {
                    items: 2
                },
                1000: {
                    items: 3
                }
            }
        })
    })
    </script>
    <!-- //for blog carousel slider -->
    <script>
    var lFollowX = 0,
        lFollowY = 0,
        x = 0,
        y = 0,
        friction = 1 / 30;

    function animate() {
        x += (lFollowX - x) * friction;
        y += (lFollowY - y) * friction;

        translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.1)';

        $('.banner-image').css({
            '-webit-transform': translate,
            '-moz-transform': translate,
            'transform': translate
        });

        window.requestAnimationFrame(animate);
    }

    $(window).on('mousemove click', function(e) {

        var lMouseX = Math.max(-100, Math.min(100, $(window).width() / 2 - e.clientX));
        var lMouseY = Math.max(-100, Math.min(100, $(window).height() / 2 - e.clientY));
        lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
        lFollowY = (10 * lMouseY) / 100;

    });

    animate();
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- Bootstrap JS -->
    <script src="/assets/website/js/frontend/vmess_node/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>