<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vmess-node.github.io/news/article-110503.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>vue3新增特性setup()用法＜与vue2对比＞</title>
        <meta name="description" content="文章目录    setup()   执行时机 setup()的第一个形参props setup()的第二个形参context reactive()   基本语法 定义响应式数据供 template 使" />
        <link rel="icon" href="/assets/website/img/vmess_node/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Vmess Node免费节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vmess-node.github.io/news/article-110503.htm" />
    <meta property="og:site_name" content="Vmess Node免费节点订阅官网" />
    <meta property="og:title" content="vue3新增特性setup()用法＜与vue2对比＞" />
    <meta property="og:image" content="https://vmess-node.github.io/uploads/20240804-1/11bd935741dfefbeb4b96ba178d6af10.webp" />
        <meta property="og:release_date" content="2025-05-03T10:28:41" />
    <meta property="og:updated_time" content="2025-05-03T10:28:41" />
        <meta property="og:description" content="文章目录    setup()   执行时机 setup()的第一个形参props setup()的第二个形参context reactive()   基本语法 定义响应式数据供 template 使" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="vue3新增特性setup()用法＜与vue2对比＞">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- google fonts -->
    <link href="//fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/vmess_node/style-starter.css">
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-M9G1YCGHCT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-M9G1YCGHCT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <div class="w3l-top-header">
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-dark stroke">
                    <a class="navbar-brand" href="/">
                                        <span>Vmess Node</span>
                                        </a>
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav mx-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/client.htm">客户端</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                    </ul>
                    </div>
                </nav>
            </div>
        </header>
    </div>
    <!--/header-->
    <!-- breadcrum -->
    <section class="w3l-deal-breadcrum">
        <div class="breadcrum py-5">
            <div class="container">
                <h1>vue3新增特性setup()用法＜与vue2对比＞</h1>
                <p><a href="/">首页</a> &nbsp; / &nbsp; <a href="/news/">新闻资讯</a>  &nbsp; / &nbsp; 正文</p>
            </div>
        </div>
    </section>
    <!-- //breadcrum -->
        <!-- //stats -->
    <section class="w3l-index2 py-5" id="about">
        <div class="container py-lg-3">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> <div class="toc"> <h3>文章目录</h3> <ul> <li> <ul> <li>setup()</li> <li> <ul> <li>执行时机</li> <li>setup()的第一个形参props</li> <li>setup()的第二个形参context</li> <li>reactive()</li> <li> <ul> <li>基本语法</li> <li>定义响应式数据供 template 使用</li> </ul> </li> <li>ref()</li> <li> <ul> <li>基本语法</li> <li>在 template 中访问 ref 创建的响应式数据</li> <li>在 reactive 对象中访问 ref 创建的响应式数据</li> </ul> </li> <li>isRef()</li> <li>toRefs()</li> </ul> </li> </ul> </li> </ul> </div> <h2>setup()</h2> <p><code>setup()</code> 函数是 vue3 中，专门为组件提供的新属性。它为我们使用 vue3 的<code>Composition API</code> 新特性提供了统一的入口。</p> <h3>执行时机</h3> <p><strong>setup</strong> 函数会在<strong>beforeCreate</strong> 之后、<strong>created</strong> 之前执行</p> <h3>setup()的第一个形参props</h3> <p>父组件</p> <pre><code>&lt;set-up p1="aaaa"&gt;&lt;/set-up&gt;</code></pre> <p>子组件set-up</p> <pre><code class="prism language-js"><span class="token comment">// 在props中定义当前组件允许外界传递过来的参数名称：</span><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span> String<span class="token punctuation">}</span>，<span class="token comment">// 通过setup函数的第一个形参，接收props数据：</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>p1<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre> <p>在vue2中子组件是这样写</p> <pre><code class="prism language-javascript"><span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token comment">// 为了让p1不仅可读，还可写，赋值给data</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">p1</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>p1<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>区别就是vue3将data和props的数据都写在了一起</p> <h3>setup()的第二个形参context</h3> <p><code>setup</code> 函数的第二个形参是一个<strong>上下文对象</strong>，这个上下文对象中包含了一些有用的属性，这些属性在<code>vue 2.x</code> 中需要通过<code>this</code> 才能访问到，在<code>vue 3.x</code> 中，它们的访问方式如下：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> MyComponent<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>     context<span class="token punctuation">.</span>attrs     context<span class="token punctuation">.</span>slots     context<span class="token punctuation">.</span>parent     context<span class="token punctuation">.</span>root     context<span class="token punctuation">.</span>emit     context<span class="token punctuation">.</span>refs<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <blockquote> <p>注意：在<code>setup()</code> 函数中无法访问到<code>this</code></p> </blockquote> <h3>reactive()</h3> <p><code>reactive()</code> 函数接收一个普通对象，返回一个响应式的数据对象。</p> <h4>基本语法</h4> <p>等价于<code>vue 2.x</code> 中的<code>Vue.observable()</code> 函数，<code>vue 3.x</code> 中提供了<code>reactive()</code> 函数，用来创建响应式的数据对象，基本代码示例如下：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> reactive<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'@vue/composition-api'</span><span class="token comment">// 创建响应式数据对象，得到的 state 类似于 vue 2.x 中 data() 返回的响应式对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre> <h4>定义响应式数据供 template 使用</h4> <ol> <li> <p>按需导入<code>reactive</code> 函数：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> reactive<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span></code></pre> </li> <li> <p>在<code>setup()</code> 函数中调用<code>reactive()</code> 函数，创建响应式<mark>数据对象</mark>：</p> <pre><code class="prism language-js"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 创建响应式数据对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// setup 函数中将响应式数据对象 return 出去，供 template 使用</span><span class="token keyword">return</span> state<span class="token punctuation">}</span></code></pre> <p><mark>注意：必须return才能在界面上用，reactive()里面必须是对象</mark></p> </li> <li> <p>在<code>template</code> 中访问响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前的 count 值为：{<!-- -->{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></code></pre> </li> </ol> <p>vue2的响应式则相对简单，直接在data中定义即可</p> <h3>ref()</h3> <h4>基本语法</h4> <p><code>ref()</code> 函数用来根据给定的值创建一个<strong>响应式</strong>的<strong>数据对象</strong>，<code>ref()</code> 函数调用的<mark>返回值是一个对象</mark>，这个对象上只包含一个<code>.value</code> 属性：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> ref<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token comment">// 创建响应式数据对象 count，初始值为 0</span><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 如果要访问 ref() 创建出来的响应式数据对象的值，必须通过 .value 属性才可以</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 0</span><span class="token comment">// 让 count 的值 +1</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token comment">// 再次打印 count 的值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 1</span></code></pre> <h4>在 template 中访问 ref 创建的响应式数据</h4> <ol> <li> <p>在<code>setup()</code> 中创建响应式数据：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> ref<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span>          count<span class="token punctuation">,</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> </li> <li> <p>在<code>template</code> 中访问响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{<!-- -->{count}} --- {<!-- -->{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre> </li> </ol> <h4>在 reactive 对象中访问 ref 创建的响应式数据</h4> <p>当把<code>ref()</code> 创建出来的响应式数据对象，挂载到<code>reactive()</code> 上时，会自动把响应式数据对象<strong>展开为原始的值</strong>，不需通过<code>.value</code> 就可以直接被访问，例如：</p> <pre><code class="prism language-js"><span class="token keyword">const</span> count<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   count<span class="token punctuation">}</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token comment">// 输出 0</span> state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token comment">// 此处不需要通过 .value 就能直接访问原始值</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">// 输出 1</span></code></pre> <blockquote> <p><strong>注意：新的 ref 会覆盖旧的 ref</strong>，示例代码如下：</p> </blockquote> <pre><code class="prism language-js"><span class="token comment">// 创建 ref 并挂载到 reactive 中</span><span class="token keyword">const</span> c1<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   c1<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 再次创建 ref，命名为 c2</span><span class="token keyword">const</span> c2<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token comment">// 将 旧 ref c1 替换为 新 ref c2</span> state<span class="token punctuation">.</span>c1<span class="token operator">=</span> c2 state<span class="token punctuation">.</span>c1<span class="token operator">++</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>c1<span class="token punctuation">)</span><span class="token comment">// 输出 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c2<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 10</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token comment">// 输出 0</span></code></pre> <h3>isRef()</h3> <p><code>isRef()</code> 用来判断某个值是否为<code>ref()</code> 创建出来的对象；应用场景：当需要展开某个可能为<code>ref()</code> 创建出来的值的时候，例如：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> isRef<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'@vue/composition-api'</span><span class="token keyword">const</span> unwrapped<span class="token operator">=</span><span class="token function">isRef</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token operator">?</span> foo<span class="token punctuation">.</span>value<span class="token operator">:</span> foo</code></pre> <h3>toRefs()</h3> <p><code>toRefs()</code> 函数可以将<code>reactive()</code> 创建出来的响应式对象，转换为普通的对象，只不过，这个对象上的每个属性节点，都是<code>ref()</code> 类型的响应式数据，最常见的应用场景如下：</p> <pre><code class="prism language-js"><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> toRefs<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">'vue'</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 定义响应式数据对象</span><span class="token keyword">const</span> state<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token literal-property property">count</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 定义页面上可用的事件处理函数</span><span class="token keyword">const</span><span class="token function-variable function">increment</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span>       state<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token comment">// 在 setup 中返回一个对象供页面使用</span><span class="token comment">// 这个对象中可以包含响应式的数据，也可以包含事件处理函数</span><span class="token keyword">return</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 将state上的每个属性，都转化为ref形式的响应式数据</span><span class="token comment">// ...是展开运算符</span><span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 自增的事件处理函数</span>       increment<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>页面上可以直接访问<code>setup()</code> 中 return 出来的响应式数据：</p> <pre><code class="prism language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>当前的count值为：{<!-- -->{count}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>increment<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></code></pre> <p>总结：</p> <ul> <li>setup(props,context)，props用来接收组件传来的内容，context用来代替setup()里的this</li> <li>reactive()用来接收一个<strong>对象</strong>，用于创建响应式数据对象，必须要return出去；（不建议使用） <ul> <li>使用的是接收对象里的属性</li> </ul> </li> <li>ref()用来接收一个<strong>值</strong>，用于创建响应式数据对象，返回的是一个对象，必须要return出去。 <ul> <li>在setup()内需通过<code>.value</code> 就可以直接被访问；</li> <li>但是在template中会自动解析，不需要<code>.value</code> ;</li> <li>reactive对象中访问ref创建的响应式数据，也不需要<code>.value</code>；ref的对象会直接变成reactive的属性</li> <li>新的 ref 会覆盖旧的 ref</li> </ul> </li> </ul> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-109641.htm">狗粮加盟代理条件（狗粮批发代理加盟）</a></p>
                                        <p>下一个：<a href="/news/article-110507.htm">CSS：实现多行文本垂直居中的四种方法</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-99272.htm" title="广州宠物领养中心官网电话 广州宠物领养中心官网电话号码">广州宠物领养中心官网电话 广州宠物领养中心官网电话号码</a></li>
                        <li class="py-2"><a href="/news/article-89619.htm" title="Linux搭建NFS服务器">Linux搭建NFS服务器</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-11-free-node-subscribe-links.htm" title="4月11日 | Vmess节点订阅每天更新19.5M/S免费订阅链接地址分享">4月11日 | Vmess节点订阅每天更新19.5M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-25-free-subscribe-node.htm" title="4月25日 | Vmess节点订阅每天更新22.5M/S免费订阅链接地址分享">4月25日 | Vmess节点订阅每天更新22.5M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-107981.htm" title="动物接种疫苗产生的免疫力为什么 动物接种疫苗产生的免疫力为什么那么低">动物接种疫苗产生的免疫力为什么 动物接种疫苗产生的免疫力为什么那么低</a></li>
                        <li class="py-2"><a href="/news/article-97810.htm" title="feign实现远程调用">feign实现远程调用</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-20-vmess-node-github.htm" title="4月20日 | Vmess节点订阅每天更新19.2M/S免费订阅链接地址分享">4月20日 | Vmess节点订阅每天更新19.2M/S免费订阅链接地址分享</a></li>
                        <li class="py-2"><a href="/news/article-88902.htm" title="宠物免费领养平台下载手机版大全视频（免费领养宠物正规网站平台）">宠物免费领养平台下载手机版大全视频（免费领养宠物正规网站平台）</a></li>
                        <li class="py-2"><a href="/news/article-100762.htm" title="如果我在封闭的一组INTERVAL单位值中只写入一个值，MySQL将返回什么？">如果我在封闭的一组INTERVAL单位值中只写入一个值，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-27-vmess-windows.htm" title="4月27日 | Vmess节点订阅每天更新20.1M/S免费订阅链接地址分享">4月27日 | Vmess节点订阅每天更新20.1M/S免费订阅链接地址分享</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">17</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <style>
    .video-heading {
        max-width: 750px;
        margin: 0 auto;
    }

    .video-heading h3 {
        font-size: 60px;
        opacity: 0.8;
        line-height: 58px;
        font-weight: 300;
        text-transform: capitalize;
        color: #fff;
    }

    .video-responsive {
        padding-bottom: 600px;
        position: relative;
        width: 100%;
    }

    .canvas,
    .video {
        left: 0;
        position: absolute;
        top: 0;
        background: #000;
        z-index: 5;
        overflow: hidden;
        width: 100%;
        height: 600px;
        object-fit: cover;
    }

    #over_video {
        position: absolute;
        width: 100%;
        height: 100%;
        text-align: center;
        top: 0;
        z-index: 10;
        color: #FFF;
    }

    .bg-mask {
        background: rgba(0, 0, 0, 0.3);
        height: inherit;
        display: grid;
        align-items: center;
        padding: 0 15px;
    }

    @media screen and (max-width: 568px) {

        .canvas,
        .video {
            height: 400px;
        }

        .video-responsive {
            padding-bottom: 400px;
        }


        .video-heading h3 {
            font-size: 35px;
            line-height: 48px;
            margin-bottom: 20px;
        }
    }
    </style>
    <script src="/assets/website/js/frontend/vmess_node/canvas-video-player.js"></script>
    <script>
    var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);

    if (isIOS) {

        var canvasVideo = new CanvasVideoPlayer({
            videoSelector: '.video',
            canvasSelector: '.canvas',
            timelineSelector: false,
            autoplay: true,
            makeLoop: true,
            pauseOnClick: false,
            audio: false
        });

    } else {

        // Use HTML5 video
        document.querySelectorAll('.canvas')[0].style.display = 'none';

    }
    </script>
    <!-- scripts -->
    <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>Vmess Node免费节点订阅官网 版权所有 Powered by WordPress
                            </p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/vmess_node/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/vmess_node/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/vmess_node/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <script src="/assets/website/js/frontend/vmess_node/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="/assets/website/js/frontend/vmess_node/owl.carousel.js"></script>
    <!-- testimonials for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials script for owlcarousel -->
    <!-- for blog carousel slider -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            stagePadding: 20,
            margin: 15,
            nav: false,
            loop: false,
            responsive: {
                0: {
                    items: 1
                },
                600: {
                    items: 2
                },
                1000: {
                    items: 3
                }
            }
        })
    })
    </script>
    <!-- //for blog carousel slider -->
    <script>
    var lFollowX = 0,
        lFollowY = 0,
        x = 0,
        y = 0,
        friction = 1 / 30;

    function animate() {
        x += (lFollowX - x) * friction;
        y += (lFollowY - y) * friction;

        translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.1)';

        $('.banner-image').css({
            '-webit-transform': translate,
            '-moz-transform': translate,
            'transform': translate
        });

        window.requestAnimationFrame(animate);
    }

    $(window).on('mousemove click', function(e) {

        var lMouseX = Math.max(-100, Math.min(100, $(window).width() / 2 - e.clientX));
        var lMouseY = Math.max(-100, Math.min(100, $(window).height() / 2 - e.clientY));
        lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
        lFollowY = (10 * lMouseY) / 100;

    });

    animate();
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- Bootstrap JS -->
    <script src="/assets/website/js/frontend/vmess_node/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>