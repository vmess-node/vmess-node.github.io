<!doctype html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://vmess-node.github.io/news/article-19672.htm" />
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>数据结构（初阶）—— C语言实现双向带头循环链表</title>
        <meta name="description" content="&nbsp; 目录 一、链表种类的优劣 二、什么是双向循环链表&nbsp; 三，双向循环链表各接口函数实现&nbsp; 1.双链表的初始化 2.双链表的打印&nbsp; 3.扩容函数&nbsp; 4." />
        <link rel="icon" href="__ADDON__/img/vmess_node/favicon.ico" type="image/x-icon"/>
    <!-- google fonts -->
    <link href="//fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <!-- Template CSS -->
    <link rel="stylesheet" href="/assets/website/css/vmess_node/style-starter.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-M9G1YCGHCT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-M9G1YCGHCT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--header-->
    <div class="w3l-top-header">
        <header id="site-header" class="fixed-top">
            <div class="container">
                <nav class="navbar navbar-expand-lg navbar-dark stroke">
                                        <a class="navbar-brand" href="/">
                        Vmess Node
                    </a>
                                        <!-- if logo is image enable this   
      <a class="navbar-brand" href="#index.html">
          <img src="image-path" alt="Your logo" title="Your logo" style="height:35px;" />
      </a> -->
                    <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                        <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                        </span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                        <ul class="navbar-nav mx-auto">
                                                        <li class="nav-item">
                                <a class="nav-link" href="/">首页</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/free-nodes/">免费节点</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="/news/">新闻资讯</a>
                            </li>
                                                        <li class="nav-item">
                                <a class="nav-link" href="#">关于</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link" href="#">联系</a>
                            </li>
                        </ul>
                    </div>
                </nav>
            </div>
        </header>
    </div>
    <!--/header-->
    <!-- breadcrum -->
    <section class="w3l-deal-breadcrum">
        <div class="breadcrum py-5">
            <div class="container">
                <h1>数据结构（初阶）—— C语言实现双向带头循环链表</h1>
                <p><a href="/">首页</a> &nbsp; / &nbsp; <a href="/news/">新闻资讯</a>  &nbsp; / &nbsp; 正文</p>
            </div>
        </div>
    </section>
    <!-- //breadcrum -->
        <!-- //stats -->
    <section class="w3l-index2 py-5" id="about">
        <div class="container py-lg-3">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="htmledit_views"> <p class="img-center"><img fetchpriority="high" decoding="async" alt="" height="699" src="http://img.555519.xyz/uploads/20230205/d3aecabcd13e52813d5d9e4cb310eaec.jpg"></p> <p>&nbsp;</p> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3-toc" style="margin-left:40px;"><a href="#%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3" rel="nofollow">一、链表种类的优劣</a></p> <p id="%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0-toc" style="margin-left:40px;"><a href="#%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0" rel="nofollow">二、什么是双向循环链表&nbsp;</a></p> <p id="%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0-toc" style="margin-left:40px;"><a href="#%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0" rel="nofollow">三，双向循环链表各接口函数实现&nbsp;</a></p> <p id="1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96-toc" style="margin-left:80px;"><a href="#1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96" rel="nofollow">1.双链表的初始化</a></p> <p id="2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0-toc" style="margin-left:80px;"><a href="#2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0" rel="nofollow">2.双链表的打印&nbsp;</a></p> <p id="3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0-toc" style="margin-left:80px;"><a href="#3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0" rel="nofollow">3.扩容函数&nbsp;</a></p> <p id="4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0-toc" style="margin-left:80px;"><a href="#4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0" rel="nofollow">4.双链表的尾插&nbsp;</a></p> <p id="%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0-toc" style="margin-left:80px;"><a href="#%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0" rel="nofollow">5.双链表的尾删</a></p> <p id="%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92-toc" style="margin-left:80px;"><a href="#%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92" rel="nofollow">6.双链表的头插</a></p> <p id="7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0-toc" style="margin-left:80px;"><a href="#7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0" rel="nofollow">7.双链表的头删&nbsp;</a></p> <p id="%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE-toc" style="margin-left:80px;"><a href="#%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE" rel="nofollow">8.双链表的查找</a></p> <p id="9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9-toc" style="margin-left:80px;"><a href="#9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9" rel="nofollow">9. 双链表在pos位置之前插入结点</a></p> <p id="10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0-toc" style="margin-left:80px;"><a href="#10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0" rel="nofollow">10.双链表删除pos位置的结点&nbsp;</a></p> <p id="11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0-toc" style="margin-left:80px;"><a href="#11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0" rel="nofollow">11.双链表的销毁&nbsp;</a></p> <p id="%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0-toc" style="margin-left:40px;"><a href="#%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0" rel="nofollow">四、源代码&nbsp;</a></p> <p id="List.h-toc" style="margin-left:80px;"><a href="#List.h" rel="nofollow">List.h</a></p> <p id="%C2%A0List.c-toc" style="margin-left:80px;"><a href="#%C2%A0List.c" rel="nofollow">List.c</a></p> <p id="%C2%A0test.c-toc" style="margin-left:80px;"><a href="#%C2%A0test.c" rel="nofollow">test.c</a></p> <p id="%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93-toc" style="margin-left:40px;"><a href="#%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93" rel="nofollow">五、顺序表和双向链表的总结</a></p> <p id="1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9-toc" style="margin-left:80px;"><a href="#1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9" rel="nofollow">1.顺序表的优点与缺点</a></p> <p id="2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9-toc" style="margin-left:80px;"><a href="#2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9" rel="nofollow">2. 双向链表的优点与缺点</a></p> <hr id="hr-toc"/> <h2 id="%E4%B8%80%E3%80%81%E9%93%BE%E8%A1%A8%E7%A7%8D%E7%B1%BB%E7%9A%84%E4%BC%98%E5%8A%A3">一、链表种类的优劣</h2> <blockquote> <p><strong>链表可分为8种：</strong></p> <table align="center" border="1" cellpadding="1" cellspacing="1" style="width:500px;"> <tbody> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向带头循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#fe2c24;"><strong>双向带头循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向带头不循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向带头不循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#0d0016;"><strong>单向不带头循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向不带头循环</strong></span></td> </tr> <tr> <td style="text-align:center;width:242px;"><span style="color:#fe2c24;"><strong>单向不带头不循环</strong></span></td> <td style="text-align:center;width:257px;"><span style="color:#0d0016;"><strong>双向不带头不循环</strong></span></td> </tr> </tbody> </table> <p><span style="color:#0d0016;"><strong>在C语言实现链表那篇博客中</strong></span><a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501"  title="https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501" rel="nofollow">https://blog.csdn.net/sjsjnsjnn/article/details/123920224?spm=1001.2014.3001.5501</a></p> <p><span style="color:#0d0016;"><strong>主要实现的是</strong></span><span style="color:#fe2c24;"><strong>单向不带头非循环</strong></span><span style="color:#0d0016;"><strong>的链表结构；</strong></span></p> <p><span style="color:#0d0016;"><strong>此结构：</strong></span></p> <div>   <span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;结构简单，一般不会单独用来存数据。实际中更多是作为其他数据结构的子结构，如哈希桶、图的邻接表等等。另外这种结构在笔试面试中出现很多。</strong></span>  </div> <div>   <span style="color:#0d0016;"><strong>-------------------------------------------------------------------------------------------------------------------------</strong></span>  </div> <div>   <span style="color:#0d0016;"><strong>本次主要分析</strong></span><br />   <strong><span style="color:#fe2c24;">双向带头循环链表</span><span style="color:#0d0016;">的链表结构；</span></strong>  </div> <div>   <span style="color:#0d0016;"><strong>此结构：</strong></span>  </div> <div> <div>    <span style="color:#777777;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong></span><br />    <strong><span style="color:#0d0016;">结构最复杂，一般用在单独存储数据。实际中使用的链表数据结构，都是带头双向</span></strong><br />    <strong><span style="color:#0d0016;">循环链表。另外这个结构虽然结构复杂，但是使用代码实现以后会发现结构会带来很多优势，实现反而</span></strong><br />    <strong><span style="color:#0d0016;">简单了；</span></strong>   </div> </p></div> <div></div> </blockquote> <h2 id="%E4%BA%8C%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%C2%A0">二、什么是双向循环链表&nbsp;</h2> <blockquote> <p><span style="color:#0d0016;"><strong>&nbsp; &nbsp; &nbsp;双向循环链表和单链表都是由结点组成的，单链表包含一个数据域和一个指针域构成，而双向循环链表不同，它是由一个数据域和两个指针域组成，其中指针包含前驱指针（prev）和后继指针（next）；</strong></span></p> <p class="img-center"><img decoding="async" alt="" height="284" src="http://img.555519.xyz/uploads/20230205/6c0bac1e5133f2931cc877e0279e6cfe.jpg"></p> <p><img decoding="async" alt="" height="270" src="http://img.555519.xyz/uploads/20230205/af3de3dc78169662f90224a91c7a2714.jpg"></p> </blockquote> <h2 id="%E4%B8%89%EF%BC%8C%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8%E5%90%84%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%C2%A0">三，双向循环链表各接口函数实现&nbsp;</h2> <h3 id="1.%C2%A0%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96">1.双链表的初始化</h3> <pre><code class="language-cpp">//双向带头循环链表的初始化 LTNode* ListInit() { 	LTNode* phead = (LTNode*)malloc(sizeof(LTNode));//创建头结点 	phead-&gt;next = phead;//后继指针指向头 	phead-&gt;prev = phead;//前驱指针指向头 	return phead; }</code></pre> <h3 id="2.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%89%93%E5%8D%B0%C2%A0">2.双链表的打印&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的打印 void ListPrint(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		printf("%d-&gt;", cur-&gt;Data); 		cur = cur-&gt;next; 	} 	printf("\n"); }</code></pre> <h3 id="3.%E6%89%A9%E5%AE%B9%E5%87%BD%E6%95%B0%C2%A0">3.扩容函数&nbsp;</h3> <pre><code class="language-cpp">//增容函数 LTNode* BuyListNode(LTDataType x) { 	LTNode* newnode = (LTNode*)malloc(sizeof(LTNode)); 	if (newnode == NULL) 	{ 		printf("malloc fail\n"); 		exit(-1); 	} 	newnode-&gt;Data = x; 	newnode-&gt;next = NULL; 	newnode-&gt;prev = NULL; 	return newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="303" src="http://img.555519.xyz/uploads/20230205/ab2611704e5cc1cb5629eda0c5d95469.jpg"></p> <h3 id="4%E3%80%81%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E6%8F%92%C2%A0">4.双链表的尾插&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	tail-&gt;next = newnode; 	newnode-&gt;prev = tail; 	newnode-&gt;next = phead; 	phead-&gt;prev = newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="705" src="http://img.555519.xyz/uploads/20230205/ecc7651ba186d3c1c9d50b695bc2d035.jpg"></p> <h3 id="%C2%A05.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B0%BE%E5%88%A0">5.双链表的尾删</h3> <pre><code class="language-cpp">//双向带头循环链表的尾删 void ListPopBack(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* tailprev = tail-&gt;prev; 	free(tail); 	tailprev-&gt;next = phead; 	phead-&gt;prev = tailprev; 	//ListErase(phead-&gt;prev);//尾删就相当于复用Erase这个函数 }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="526" src="http://img.555519.xyz/uploads/20230205/6aa29a07ed711d4136960c5a26fb22ae.jpg"></p> <h3 id="%C2%A06.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E6%8F%92">6.双链表的头插</h3> <pre><code class="language-cpp">//双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* newnode = BuyListNode(x); 	LTNode* next = phead-&gt;next;//先找到头 	phead-&gt;next = newnode; 	newnode-&gt;prev = phead; 	newnode-&gt;next = next; 	next-&gt;prev = newnode; 	//ListInsert(phead-&gt;next, x); }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="855" src="http://img.555519.xyz/uploads/20230205/4aff9b60c1fc95dda9ac0b94db12399a.jpg"></p> <h3 id="7.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%B4%E5%88%A0%C2%A0">7.双链表的头删&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的头删 void ListPopFront(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead);//如果哨兵位的后继指针指向的是头，就不能去调用头删 	LTNode* next = phead-&gt;next;//先找到头结点 	LTNode* nextNext = next-&gt;next;//再找到头结点的下一个结点 	phead-&gt;next = next-&gt;next; 	nextNext-&gt;prev = phead; }</code></pre> <p>&nbsp;<img loading="lazy" decoding="async" alt="" height="776" src="http://img.555519.xyz/uploads/20230205/aac82f8d72d9f58be8b3e7fc42c70a75.jpg"></p> <h3 id="%C2%A08.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE">8.双链表的查找</h3> <pre><code class="language-cpp">//双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* cur = phead-&gt;next;//从头结点出发 	while (cur != phead) 	{         //找到返回对应的地址 		if (cur-&gt;Data == x) 		{ 			return cur; 		}         //找不到继续向后找 		cur = cur-&gt;next; 	}     //彻底找不到 	return NULL; }</code></pre> <h3 id="9.%20%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%9C%A8pos%E4%BD%8D%E7%BD%AE%E4%B9%8B%E5%89%8D%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9">9. 双链表在pos位置之前插入结点</h3> <pre><code class="language-cpp">//双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev;//先找到pos的前一个结点的位置 	LTNode* newnode = BuyListNode(x); 	posPrev-&gt;next = newnode; 	newnode-&gt;prev = posPrev; 	newnode-&gt;next = pos; 	pos-&gt;prev = newnode; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="1200" src="http://img.555519.xyz/uploads/20230205/dc4941dc9f6850a013bc8edea6c413d7.jpg"></p> <h3 id="10.%E5%8F%8C%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4pos%E4%BD%8D%E7%BD%AE%E7%9A%84%E7%BB%93%E7%82%B9%C2%A0">10.双链表删除pos位置的结点&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表pos位置删除 void ListErase(LTNode* pos) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev;//找到pos的前一个位置 	LTNode* posNext = pos-&gt;next;//和pos的后一个位置     //把前一个结点和后一个结点链接起来 	posPrev-&gt;next = posNext; 	posNext-&gt;prev = posPrev;     //释放pos结点 	free(pos); 	pos = NULL; }</code></pre> <p><img loading="lazy" decoding="async" alt="" height="950" src="http://img.555519.xyz/uploads/20230205/a6e3885111c28e14fe4aaa03ffe1786e.jpg"></p> <h3 id="11.%E5%8F%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%94%80%E6%AF%81%C2%A0">11.双链表的销毁&nbsp;</h3> <pre><code class="language-cpp">//双向带头循环链表的销毁 void ListDestroy(LTNode* phead) {     //在销毁链表的时候，逐个销毁，销毁前一个，必须要保存下一个结点的地址 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		LTNode* next = cur-&gt;next; 		free(cur); 		cur = next; 	} 	free(phead); 	phead = NULL; }</code></pre> <h2 id="%E5%9B%9B%E3%80%81%E6%BA%90%E4%BB%A3%E7%A0%81%C2%A0">四、源代码&nbsp;</h2> <h3 id="List.h">List.h</h3> <pre><code class="language-cpp">#pragma once  #include &lt;stdio.h&gt; #include &lt;assert.h&gt; #include &lt;stdlib.h&gt;  typedef int LTDataType;  typedef struct ListNode { 	LTDataType Data; 	struct ListNode* next; 	struct ListNode* prev; }LTNode;  //双向带头循环链表的初始化 LTNode* ListInit();  //双向带头循环链表的打印 void ListPrint(LTNode* phead);  //增容函数 LTNode* BuyListNode(LTDataType x);  //双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x);  //双向带头循环链表的尾删 void ListPopBack(LTNode* phead);  //双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x);  //双向带头循环链表的头删 void ListPopFront(LTNode* phead);  //双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x);  //双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x);  //双向带头循环链表pos位置删除 void ListErase(LTNode* pos);  //双向带头循环链表的销毁 void ListDestroy(LTNode* phead);</code></pre> <h3 id="%C2%A0List.c">List.c</h3> <pre><code class="language-cpp">#include "List.h"  //双向带头循环链表的初始化 LTNode* ListInit() { 	LTNode* phead = (LTNode*)malloc(sizeof(LTNode));//创建头结点 	phead-&gt;next = phead;//后继指针指向头 	phead-&gt;prev = phead;//前驱指针指向头 	return phead; }  //双向带头循环链表的打印 void ListPrint(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		printf("%d-&gt;", cur-&gt;Data); 		cur = cur-&gt;next; 	} 	printf("\n"); }  //增容函数 LTNode* BuyListNode(LTDataType x) { 	LTNode* newnode = (LTNode*)malloc(sizeof(LTNode)); 	if (newnode == NULL) 	{ 		printf("malloc fail\n"); 		exit(-1); 	} 	newnode-&gt;Data = x; 	newnode-&gt;next = NULL; 	newnode-&gt;prev = NULL; 	return newnode; }  //双向带头循环链表的尾插 void ListPushBack(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	tail-&gt;next = newnode; 	newnode-&gt;prev = tail; 	newnode-&gt;next = phead; 	phead-&gt;prev = newnode; }  //双向带头循环链表的尾删 void ListPopBack(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* tail = phead-&gt;prev; 	LTNode* tailprev = tail-&gt;prev; 	free(tail); 	tailprev-&gt;next = phead; 	phead-&gt;prev = tailprev; 	//ListErase(phead-&gt;prev);//尾删就相当于复用Erase这个函数 }  //双向带头循环链表的头插 void ListPushFront(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* newnode = BuyListNode(x); 	LTNode* next = phead-&gt;next; 	phead-&gt;next = newnode; 	newnode-&gt;prev = phead; 	newnode-&gt;next = next; 	next-&gt;prev = newnode; 	//ListInsert(phead-&gt;next, x); }  //双向带头循环链表的头删 void ListPopFront(LTNode* phead) { 	assert(phead); 	assert(phead-&gt;next != phead); 	LTNode* next = phead-&gt;next; 	LTNode* nextNext = next-&gt;next; 	phead-&gt;next = next-&gt;next; 	nextNext-&gt;prev = phead; }  //双向带头循环链表的查找 LTNode* ListFind(LTNode* phead, LTDataType x) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		if (cur-&gt;Data == x) 		{ 			return cur; 		} 		cur = cur-&gt;next; 	} 	return NULL; }  //双向带头循环链表pos位置之前插入 void ListInsert(LTNode* pos, LTDataType x) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev; 	LTNode* newnode = BuyListNode(x); 	posPrev-&gt;next = newnode; 	newnode-&gt;prev = posPrev; 	newnode-&gt;next = pos; 	pos-&gt;prev = newnode; }  //双向带头循环链表pos位置删除 void ListErase(LTNode* pos) { 	assert(pos); 	LTNode* posPrev = pos-&gt;prev; 	LTNode* posNext = pos-&gt;next; 	posPrev-&gt;next = posNext; 	posNext-&gt;prev = posPrev; 	free(pos); 	pos = NULL; }  //双向带头循环链表的销毁 void ListDestroy(LTNode* phead) { 	assert(phead); 	LTNode* cur = phead-&gt;next; 	while (cur != phead) 	{ 		LTNode* next = cur-&gt;next; 		free(cur); 		cur = next; 	} 	free(phead); 	phead = NULL; }</code></pre> <h3 id="%C2%A0test.c">test.c</h3> <pre><code class="language-cpp">#include "List.h"   void TestList1() { 	LTNode* plist = ListInit(); 	ListPushBack(plist, 5); 	ListPushBack(plist, 6); 	ListPushBack(plist, 7); 	ListPushBack(plist, 8); 	ListPrint(plist); 	ListPopBack(plist); 	ListPrint(plist);  	ListPushFront(plist, 4); 	ListPushFront(plist, 3); 	ListPushFront(plist, 2); 	ListPushFront(plist, 1); 	ListPrint(plist); 	//ListPopFront(plist); 	//ListPopFront(plist); 	//ListPrint(plist);  	LTNode* ret = ListFind(plist, 4); 	ListInsert(ret, 30); 	ListPrint(plist); 	ListDestroy(plist); 	plist = NULL; }  int main() { 	TestList1(); 	return 0; }</code></pre> <h2 id="%E4%BA%94%E3%80%81%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E6%80%BB%E7%BB%93">五、顺序表和双向链表的总结</h2> <h3 id="1.%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9"><span style="color:#0d0016;"><strong>1.顺序表的优点与缺点</strong></span></h3> <blockquote> <p><span style="color:#0d0016;"><strong>优点：（可以使用下标访问&nbsp;）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong></span></p> <p><span style="color:#0d0016;"><strong>1.支持随机访问；需要随机访问结构支持算法可以很好的适用；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.cpu高速缓存命中率更高&nbsp;</strong></span></p> <p><span style="color:#0d0016;"><strong>缺点：</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.头部、中部插入删除数据时间效率低。O(N)</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.连续的物理空间，空间不够需要增容；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;①、增容有一定程度消耗</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;②、为了避免频繁增容，一般我们都按倍数去增，用不完可能存在一定的空间浪费</strong></span></p> </blockquote> <h3 id="2.%20%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8%E7%9A%84%E4%BC%98%E7%82%B9%E4%B8%8E%E7%BC%BA%E7%82%B9"><span style="color:#0d0016;"><strong>2. 双向链表的优点与缺点</strong></span></h3> <blockquote> <p><span style="color:#0d0016;"><strong>优点：（不可以使用下标访问&nbsp;）</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.任意位置插入，效率高；o(1)</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.按需申请释放空间；</strong></span></p> <p><span style="color:#0d0016;"><strong>缺点：</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.不支持随机访问；意味着：一些排序，二分查找在这种结构上不适用；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.链表存储一个值，同时要存储链接指针，也有一定的消耗；</strong></span></p> <p><span style="color:#0d0016;"><strong>&nbsp; &nbsp; &nbsp; &nbsp; 3.cpu高速缓存命中率更低；</strong></span></p> </blockquote></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-19216.htm">兽用疫苗批号查询系统 兽用疫苗批号查询系统官网</a></p>
                                        <p>下一个：<a href="/news/article-19673.htm">Logback及其MDC功能详解</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-9-21-free-node-subscribe.htm" title="9月21日 | Vmess节点订阅每天更新19.3M/S免费节点订阅链接">9月21日 | Vmess节点订阅每天更新19.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-7-today-vmess-node.htm" title="11月7日 | Vmess节点订阅每天更新21.2M/S免费节点订阅链接">11月7日 | Vmess节点订阅每天更新21.2M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-latest-vmess-node.htm" title="11月15日 | Vmess节点订阅每天更新18M/S免费节点订阅链接">11月15日 | Vmess节点订阅每天更新18M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-22-latest-vmess-node.htm" title="9月22日 | Vmess节点订阅每天更新20.8M/S免费节点订阅链接">9月22日 | Vmess节点订阅每天更新20.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-4-today-vmess-node.htm" title="8月4日 | Vmess Node每天更新18.8M/S免费节点订阅链接">8月4日 | Vmess Node每天更新18.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-8-20-vmess-node-share.htm" title="8月20日 | Vmess节点订阅每天更新20.3M/S免费节点订阅链接">8月20日 | Vmess节点订阅每天更新20.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-30-node-share.htm" title="10月30日 | Vmess节点订阅每天更新18.8M/S免费节点订阅链接">10月30日 | Vmess节点订阅每天更新18.8M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-8-vmess-github.htm" title="9月8日 | Vmess节点订阅每天更新21.1M/S免费节点订阅链接">9月8日 | Vmess节点订阅每天更新21.1M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-11-vmess-node-github.htm" title="10月11日 | Vmess节点订阅每天更新20.3M/S免费节点订阅链接">10月11日 | Vmess节点订阅每天更新20.3M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-10-latest-vmess-node.htm" title="9月10日 | Vmess节点订阅每天更新19.6M/S免费节点订阅链接">9月10日 | Vmess节点订阅每天更新19.6M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section>
        <style>
    .video-heading {
        max-width: 750px;
        margin: 0 auto;
    }

    .video-heading h3 {
        font-size: 60px;
        opacity: 0.8;
        line-height: 58px;
        font-weight: 300;
        text-transform: capitalize;
        color: #fff;
    }

    .video-responsive {
        padding-bottom: 600px;
        position: relative;
        width: 100%;
    }

    .canvas,
    .video {
        left: 0;
        position: absolute;
        top: 0;
        background: #000;
        z-index: 5;
        overflow: hidden;
        width: 100%;
        height: 600px;
        object-fit: cover;
    }

    #over_video {
        position: absolute;
        width: 100%;
        height: 100%;
        text-align: center;
        top: 0;
        z-index: 10;
        color: #FFF;
    }

    .bg-mask {
        background: rgba(0, 0, 0, 0.3);
        height: inherit;
        display: grid;
        align-items: center;
        padding: 0 15px;
    }

    @media screen and (max-width: 568px) {

        .canvas,
        .video {
            height: 400px;
        }

        .video-responsive {
            padding-bottom: 400px;
        }


        .video-heading h3 {
            font-size: 35px;
            line-height: 48px;
            margin-bottom: 20px;
        }
    }
    </style>
    <script src="/assets/website/js/frontend/vmess_node/canvas-video-player.js"></script>
    <script>
    var isIOS = /iPad|iPhone|iPod/.test(navigator.platform);

    if (isIOS) {

        var canvasVideo = new CanvasVideoPlayer({
            videoSelector: '.video',
            canvasSelector: '.canvas',
            timelineSelector: false,
            autoplay: true,
            makeLoop: true,
            pauseOnClick: false,
            audio: false
        });

    } else {

        // Use HTML5 video
        document.querySelectorAll('.canvas')[0].style.display = 'none';

    }
    </script>
    <!-- scripts -->
    <footer>
        <!-- footer -->
        <section class="w3l-footer">
            <div class="w3l-footer-16-main py-5">
                <div class="container">
                    <div class="d-flex below-section justify-content-between align-items-center pt-4 mt-5">
                        <div class="columns text-lg-left text-center">
                            <p>Vmess Node免费节点订阅官网 版权所有 Powered by WordPress
                            </p>
                        </div>
                        <div class="columns-2 mt-lg-0 mt-3">
                            <ul class="social">
                                <li><a href="#facebook"><span class="fa fa-facebook" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#linkedin"><span class="fa fa-linkedin" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#twitter"><span class="fa fa-twitter" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#google"><span class="fa fa-google-plus" aria-hidden="true"></span></a>
                                </li>
                                <li><a href="#github"><span class="fa fa-github" aria-hidden="true"></span></a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <!-- move top -->
            <button onclick="topFunction()" id="movetop" title="Go to top">
                <span class="fa fa-angle-up"></span>
            </button>
            <script>
            // When the user scrolls down 20px from the top of the document, show the button
            window.onscroll = function() {
                scrollFunction()
            };

            function scrollFunction() {
                if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                    document.getElementById("movetop").style.display = "block";
                } else {
                    document.getElementById("movetop").style.display = "none";
                }
            }

            // When the user clicks on the button, scroll to the top of the document
            function topFunction() {
                document.body.scrollTop = 0;
                document.documentElement.scrollTop = 0;
            }
            </script>
            <!-- //move top -->
            <script>
            $(function() {
                $('.navbar-toggler').click(function() {
                    $('body').toggleClass('noscroll');
                })
            });
            </script>
        </section>
        <!-- //footer -->
    </footer>
    <!-- jQuery -->
    <script src="/assets/website/js/frontend/vmess_node/jquery-3.5.1.min.js"></script>
    <!-- Template JavaScript -->
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/vmess_node/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/vmess_node/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <script src="/assets/website/js/frontend/vmess_node/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <script src="/assets/website/js/frontend/vmess_node/owl.carousel.js"></script>
    <!-- testimonials for owlcarousel -->
    <script>
    $(document).ready(function() {
        $('.owl-one').owlCarousel({
            loop: true,
            margin: 0,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                667: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 1,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //testimonials script for owlcarousel -->
    <!-- for blog carousel slider -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            stagePadding: 20,
            margin: 15,
            nav: false,
            loop: false,
            responsive: {
                0: {
                    items: 1
                },
                600: {
                    items: 2
                },
                1000: {
                    items: 3
                }
            }
        })
    })
    </script>
    <!-- //for blog carousel slider -->
    <script>
    var lFollowX = 0,
        lFollowY = 0,
        x = 0,
        y = 0,
        friction = 1 / 30;

    function animate() {
        x += (lFollowX - x) * friction;
        y += (lFollowY - y) * friction;

        translate = 'translate(' + x + 'px, ' + y + 'px) scale(1.1)';

        $('.banner-image').css({
            '-webit-transform': translate,
            '-moz-transform': translate,
            'transform': translate
        });

        window.requestAnimationFrame(animate);
    }

    $(window).on('mousemove click', function(e) {

        var lMouseX = Math.max(-100, Math.min(100, $(window).width() / 2 - e.clientX));
        var lMouseY = Math.max(-100, Math.min(100, $(window).height() / 2 - e.clientY));
        lFollowX = (20 * lMouseX) / 100; // 100 : 12 = lMouxeX : lFollow
        lFollowY = (10 * lMouseY) / 100;

    });

    animate();
    </script>
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- Bootstrap JS -->
    <script src="/assets/website/js/frontend/vmess_node/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>